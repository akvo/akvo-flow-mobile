apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    jcenter()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    def Properties versionProps = loadProperties('version.properties')
    def Properties surveyProps = loadProperties('survey.properties')

    def versionMajor = versionProps['VERSION_MAJOR'].toString()
    def versionMinor = versionProps['VERSION_MINOR'].toString()
    def versionPatch = versionProps['VERSION_PATCH'].toString()
    def versionCodeProperty = versionProps['VERSION_CODE'].toInteger()

    defaultConfig {
        versionCode versionCodeProperty
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        applicationId "org.akvo.flow"
        testApplicationId "org.akvo.flow.tests"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testHandleProfiling true
        testFunctionalTest true
        vectorDrawables.useSupportLibrary = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    signingConfigs {

        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug-key/debug.keystore')
            storePassword 'android'
        }

        flowRelease {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
        buildTypes {
            release {
                minifyEnabled true
                proguardFile 'proguard-files/proguard-rules.pro'
                proguardFile 'proguard-files/proguard-butterknife.pro'
                proguardFile 'proguard-files/proguard-glide.pro'
                proguardFile 'proguard-files/proguard-google-play-services.pro'
                proguardFile 'proguard-files/proguard-gson.pro'
                proguardFile 'proguard-files/proguard-jackson.pro'
                proguardFile 'proguard-files/proguard-maps-utils.pro'
                proguardFile 'proguard-files/proguard-prettytime.pro'
                proguardFile 'proguard-files/proguard-sentry.pro'
                proguardFile 'proguard-files/proguard-square-retrofit.pro'
                proguardFile 'proguard-files/proguard-support-v7-appcompat.pro'
                proguardFile 'proguard-files/proguard-rxjava.pro'
                proguardFile getDefaultProguardFile('proguard-android.txt')
                signingConfig signingConfigs.flowRelease
            }
        }
    }

    buildTypes {
        buildTypes.each {
            def serverBase = surveyProps['serverBase'].toString()
            def awsBucket = surveyProps['awsBucket'].toString()
            def awsAccessKeyId = surveyProps['awsAccessKeyId'].toString()
            def awsSecretKey = surveyProps['awsSecretKey'].toString()
            def apiKey = surveyProps['apiKey'].toString()

            def signingKey = surveyProps['signingKey'].toString()
            if ("null" == signingKey) {
                signingKey = ""
            }

            def instanceUrl = surveyProps['instanceUrl'].toString()
            if ("null" == instanceUrl) {
                instanceUrl = serverBase
            }

            it.buildConfigField "String", "SERVER_BASE", "\"${serverBase}\""
            it.buildConfigField "String", "INSTANCE_URL", "\"${instanceUrl}\""
            it.buildConfigField "String", "AWS_BUCKET", "\"${awsBucket}\""
            it.buildConfigField "String", "AWS_ACCESS_KEY_ID", "\"${awsAccessKeyId}\""
            it.buildConfigField "String", "AWS_SECRET_KEY", "\"${awsSecretKey}\""
            it.buildConfigField "String", "API_KEY", "\"${apiKey}\""
            it.buildConfigField "String", "SIGNING_KEY", "\"${signingKey}\""
        }
    }

        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/ASL2.0'
            exclude '.readme'
        }

    productFlavors {
        flow {
        }
        biogas {
        }
        cookstoves {
        }
    }

        testOptions {
            unitTests.returnDefaultValues = true
        }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings false
        lintConfig file('lint.xml')
        ignore 'InvalidPackage'
    }


    sourceSets {
        biogas.res.srcDirs = ['src/snv/res', 'src/biogas/res']
        cookstoves.res.srcDirs = ['src/snv/res', 'src/cookstoves/res']
    }
}

private Properties loadProperties(String fileName) {
    Properties versionProps = new Properties()
    def versionPropsFile = file(fileName)
    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    } else {
        throw new GradleException("Could not read ".fileName)
    }
    versionProps
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        output.outputFile = file("bin/flow.apk")
    }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:support-annotations:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.google.android.gms:play-services-maps:7.5.0'
    compile 'com.google.android.gms:play-services-gcm:7.5.0'
    compile 'org.ocpsoft.prettytime:prettytime:3.2.4.Final'
    compile 'com.google.maps.android:android-maps-utils:0.4'
    compile 'com.jakewharton.timber:timber:4.5.1'
    compile 'com.google.dagger:dagger:2.8'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.8'
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    compile 'com.getsentry.raven:raven-android:8.0.2'
    compile 'com.github.bumptech.glide:glide:3.8.0'
    compile 'com.squareup.sqlbrite2:sqlbrite:2.0.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.2'
    testCompile 'org.powermock:powermock-api-mockito:1.6.2'
    testCompile 'org.powermock:powermock-classloading-xstream:1.6.2'

    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile('com.android.support.test:rules:0.5') {
        exclude module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2') {
        exclude module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.1') {
        exclude module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    compile project(':domain')
    compile project(':data')
    compile project(':database')
}
