apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.google.firebase.crashlytics'
apply from: rootProject.file("jacoco.gradle")
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.appdistribution'

dexcount {
    enabled = !project.hasProperty("nodexcount")
}

loadProperties()

def loadProperties() {
    def file = hasProperty('file') ? file : 'survey.properties'
    project.ext.surveyProps = readProperties(file)
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    Properties versionProps = readProperties('version.properties')

    def versionMajor = versionProps['VERSION_MAJOR'].toString()
    def versionMinor = versionProps['VERSION_MINOR'].toString()
    def versionPatch = versionProps['VERSION_PATCH'].toString()
    def versionCodeProperty = versionProps['VERSION_CODE'].toInteger()
    def buildYear = getBuildYear()

    defaultConfig {
        versionCode versionCodeProperty
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        applicationId "org.akvo.flow"
        testApplicationId "org.akvo.flow.tests"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testHandleProfiling true
        testFunctionalTest true
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries true
    }

    signingConfigs {

        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug-key/debug.keystore')
            storePassword 'android'
        }

        flowRelease {
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        buildTypes.each {
            def serverBase = surveyProps['serverBase'].toString()
            def awsBucket = surveyProps['awsBucket'].toString()
            def awsAccessKeyId = surveyProps['awsAccessKeyId'].toString()
            def awsSecretKey = surveyProps['awsSecretKey'].toString()
            def apiKey = surveyProps['apiKey'].toString()

            def instanceUrl = surveyProps['instanceUrl'].toString()
            if ("null" == instanceUrl) {
                instanceUrl = serverBase
            }

            it.buildConfigField "String", "SERVER_BASE", "\"${serverBase}\""
            it.buildConfigField "String", "INSTANCE_URL", "\"${instanceUrl}\""
            it.buildConfigField "String", "AWS_BUCKET", "\"${awsBucket}\""
            it.buildConfigField "String", "AWS_ACCESS_KEY_ID", "\"${awsAccessKeyId}\""
            it.buildConfigField "String", "AWS_SECRET_KEY", "\"${awsSecretKey}\""
            it.buildConfigField "String", "API_KEY", "\"${apiKey}\""
            it.buildConfigField "String", "SIGNING_KEY", "\"\""
            it.buildConfigField "String", "BUILD_YEAR", "\"${buildYear}\""
        }

        release {
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            proguardFile 'proguard-files/proguard-rules.pro'
            proguardFile 'proguard-files/proguard-butterknife.pro'
            proguardFile 'proguard-files/proguard-glide.pro'
            proguardFile 'proguard-files/proguard-google-play-services.pro'
            proguardFile 'proguard-files/proguard-gson.pro'
            proguardFile 'proguard-files/proguard-prettytime.pro'
            proguardFile 'proguard-files/proguard-rxjava.pro'
            proguardFile 'proguard-files/proguard-square-retrofit.pro'
            proguardFile 'proguard-files/proguard-support-v7-appcompat.pro'
            proguardFile 'proguard-files/okhttp3.pro'
            proguardFile 'proguard-files/mapbox.pro'
            proguardFile 'proguard-files/leakcanary.pro'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.flowRelease

            firebaseAppDistribution {
                groups = "testers"
                if (project.hasProperty('APP_ID')) {
                    appId = APP_ID
                }
            }
        }
        debug {
            minifyEnabled false
            multiDexEnabled true
            testCoverageEnabled true
            proguardFile 'proguard-files/proguard-rules.pro'
            proguardFile 'proguard-files/proguard-butterknife.pro'
            proguardFile 'proguard-files/proguard-glide.pro'
            proguardFile 'proguard-files/proguard-google-play-services.pro'
            proguardFile 'proguard-files/proguard-gson.pro'
            proguardFile 'proguard-files/proguard-prettytime.pro'
            proguardFile 'proguard-files/proguard-rxjava.pro'
            proguardFile 'proguard-files/proguard-square-retrofit.pro'
            proguardFile 'proguard-files/proguard-support-v7-appcompat.pro'
            proguardFile 'proguard-files/okhttp3.pro'
            proguardFile 'proguard-files/mapbox.pro'
            proguardFile 'proguard-files/leakcanary.pro'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            multiDexKeepProguard file('proguard-files/proguard-multidex-rules.pro')

            testProguardFile 'proguard-files/proguard-rules.pro'
            testProguardFile 'proguard-files/proguard-butterknife.pro'
            testProguardFile 'proguard-files/proguard-glide.pro'
            testProguardFile 'proguard-files/proguard-google-play-services.pro'
            testProguardFile 'proguard-files/proguard-gson.pro'
            testProguardFile 'proguard-files/proguard-prettytime.pro'
            testProguardFile 'proguard-files/proguard-rxjava.pro'
            testProguardFile 'proguard-files/proguard-square-retrofit.pro'
            testProguardFile 'proguard-files/proguard-support-v7-appcompat.pro'
            testProguardFile 'proguard-files/okhttp3.pro'
            testProguardFile 'proguard-files/mapbox.pro'
            testProguardFile 'proguard-files/leakcanary.pro'
            testProguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude '.readme'
        exclude 'androidsupportmultidexversion.txt'
    }

    flavorDimensions "default"

    productFlavors {
        flow {
            dimension "default"
        }
        biogas {
            dimension "default"
        }
        cookstoves {
            dimension "default"
        }
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings false
        xmlReport false
        lintConfig file('lint.xml')
        ignore 'InvalidPackage'
    }

    sourceSets {
        biogas.res.srcDirs = ['src/snv/res', 'src/biogas/res']
        cookstoves.res.srcDirs = ['src/snv/res', 'src/cookstoves/res']
    }
}

private Properties readProperties(String fileName) {
    Properties versionProps = new Properties()
    def versionPropsFile = file(fileName)
    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
    } else {
        throw new GradleException("Could not read ${fileName}")
    }
    versionProps
}

private static String getBuildYear() {
    new Date().format('yyyy')
}

dependencies {
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}"
    implementation "androidx.exifinterface:exifinterface:${rootProject.ext.exifVersion}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.recyclerVersion}"
    implementation "androidx.annotation:annotation:${rootProject.ext.annotationVersion}"
    implementation "com.google.android.material:material:${rootProject.ext.materialVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintLayoutVersion}"
    implementation "androidx.multidex:multidex:${rootProject.ext.multidexVersion}"
    implementation "org.ocpsoft.prettytime:prettytime:${rootProject.ext.prettyTimeVersion}"
    implementation "com.jakewharton.timber:timber:${rootProject.ext.timberVersion}"
    implementation "com.google.dagger:dagger:${rootProject.ext.daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${rootProject.ext.daggerVersion}"
    implementation "com.jakewharton:butterknife:${rootProject.ext.butterKnifeVersion}"
    kapt "com.jakewharton:butterknife-compiler:${rootProject.ext.butterKnifeVersion}"
    implementation "com.github.bumptech.glide:glide:${rootProject.ext.glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${rootProject.ext.glideVersion}"
    implementation "com.squareup.sqlbrite2:sqlbrite:${rootProject.ext.sqlbriteVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxAndroidVersion}"
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxJavaVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.loggingInterceptorVersion}"
    implementation "com.google.code.gson:gson:${rootProject.ext.gsonVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.coroutinesVersion}"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:${rootProject.ext.leakCanaryVersion}"

    implementation "com.google.firebase:firebase-analytics:${rootProject.ext.firebaseAnalyticsVersion}"
    implementation "com.google.firebase:firebase-crashlytics:${rootProject.ext.crashlyticsVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "androidx.core:core-ktx:${rootProject.ext.coreKtxVersion}"
    implementation "com.mapbox.mapboxsdk:mapbox-android-sdk:${rootProject.ext.mapboxVersion}"
    implementation "com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:${rootProject.ext.mapboxAnnotationsVersion}"
    implementation "androidx.work:work-runtime:${rootProject.ext.workVersion}"
    implementation "org.slf4j:slf4j-nop:${rootProject.ext.slf4JVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    testImplementation "junit:junit:${rootProject.ext.jUnitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "org.powermock:powermock-module-junit4:${rootProject.ext.powerMockVersion}"
    testImplementation "org.powermock:powermock-module-junit4-rule:${rootProject.ext.powerMockVersion}"
    testImplementation "org.powermock:powermock-api-mockito2:${rootProject.ext.powerMockVersion}"
    testImplementation "org.powermock:powermock-classloading-xstream:${rootProject.ext.powerMockVersion}"
    testImplementation "io.kotlintest:kotlintest-runner-junit4:${rootProject.ext.kotlintestVerion}"
    testImplementation "io.mockk:mockk:${rootProject.ext.mockkVersion}"

    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.androidXJunit}"
    androidTestImplementation "androidx.test:core:${rootProject.ext.androidXCore}"
    androidTestImplementation "com.google.dexmaker:dexmaker:${rootProject.ext.dexMakerVersion}"
    androidTestImplementation "com.google.dexmaker:dexmaker-mockito:${rootProject.ext.dexMakerVersion}"
    androidTestImplementation "androidx.test:rules:${rootProject.ext.rulesVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${rootProject.ext.espressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${rootProject.ext.espressoVersion}"
    androidTestImplementation "com.github.fabioCollini.daggermock:daggermock:${rootProject.ext.daggermockVersion}"
    androidTestImplementation "com.github.fabioCollini.daggermock:daggermock-kotlin:${rootProject.ext.daggermockVersion}"

    implementation project(':domain')
    implementation project(':data')
    implementation project(':database')
    implementation project(':offlinemaps')
    implementation project(':walkthrough')
    implementation project(':uicomponents')

    apply plugin: 'com.google.gms.google-services'
}
